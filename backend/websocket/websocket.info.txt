Gestion Websocket
========================

ğŸ“Œ creation d'une gestion websocket cote server dans server.js
----------------
Initialiser un serveur WebSocket et le lier au serveur HTTP.
VÃ©rifier et authentifier les connexions avec un accessToken.
Associer chaque WebSocket Ã  un userId pour identifier les utilisateurs connectÃ©s.
GÃ©rer la dÃ©connexion et mettre Ã  jour les utilisateurs en ligne.

ğŸ“Œ suivi users online
-------------------------
Stocker la liste des utilisateurs connectÃ©s dans Redis pour un accÃ¨s rapide.
Diffuser la mise Ã  jour de la liste des utilisateurs en ligne Ã  tous les clients.
GÃ©rer automatiquement la suppression d'un utilisateur de la liste lorsqu'il se dÃ©connecte.
Utiliser un mÃ©canisme de ping-pong rÃ©gulier pour Ã©viter les connexions fantÃ´mes.
Assurer la reconnexion automatique en cas de coupure WebSocket.

ğŸ“Œ Gestion WebSocket cÃ´tÃ© front dans index.html
-------------------------

Se connecter automatiquement au WebSocket lors du chargement de la page.
Ã‰couter les mises Ã  jour des utilisateurs en ligne et mettre Ã  jour l'affichage.
Envoyer des ping rÃ©guliÃ¨rement pour garder la connexion active.
Mettre en place une reconnexion automatique en cas de dÃ©connexion.
IntÃ©grer la recherche d'utilisateurs avec indication de leur statut en temps rÃ©el (online/offline).