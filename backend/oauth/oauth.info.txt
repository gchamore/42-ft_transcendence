Explications pour oauth
========================

✅ Étape 1 : Configuration Google Cloud Console
Avant de coder, il faut configurer l’authentification OAuth 2.0 sur Google Cloud.

1️⃣ Créer un projet sur Google Cloud Console.
2️⃣ Activer l’API Google OAuth 2.0.
3️⃣ Créer des identifiants OAuth 2.0 :

Type : Web application
Ajouter l’URI de redirection autorisée :

http://localhost:8080/auth/callback
Récupérer et noter :
client_id
client_secret
⚠️ Subtilités à prendre en compte pour ton projet :

Ces variables seront stockées en .env sur le backend et jamais exposées sur le front.
Si ton projet passe en production, il faudra mettre l’URL finale (https://mon-site.com/auth/callback) dans la configuration Google.
✅ Étape 2 : Mise en place du bouton Google Login sur le frontend
L’objectif ici est de rediriger l’utilisateur vers Google pour l’authentification.

📌 Déroulement du processus :

Lorsqu’un utilisateur clique sur "Se connecter avec Google", il est redirigé vers la page d’authentification de Google.
Google lui demande de se connecter et d’autoriser l’application à accéder à ses informations (email, nom, avatar).
Une fois l’utilisateur authentifié, Google redirige l’utilisateur vers l’URL de callback définie dans la configuration (/auth/callback).
⚠️ Subtilités à prendre en compte pour ton projet :

Cette route /auth/callback est publique ➝ elle ne doit pas être protégée par ton middleware d’authentification.
Si l’utilisateur ouvre plusieurs fenêtres de connexion, il faudra gérer proprement la session et la fermeture des WebSockets inutiles.
✅ Étape 3 : Gestion du callback Google côté frontend
L’utilisateur revient sur ton site après s’être authentifié sur Google.

📌 Déroulement :

L’utilisateur est redirigé vers /auth/callback?code=ABC123.
Le front extrait le code de l’URL et envoie une requête au backend (POST /auth/google/callback).
Le front attend la réponse du backend :
✅ Si tout est OK, l’utilisateur est redirigé vers /profile et les tokens sont gérés en cookies HTTP-only.
❌ En cas d’erreur, il est renvoyé vers la page de connexion avec un message d’erreur.
⚠️ Subtilités à prendre en compte pour ton projet :

Aucune donnée sensible (code, token, email) ne doit être stockée en local sur le front (tout est géré en backend).
Gérer correctement les erreurs OAuth ➝ si un problème survient (code invalide, utilisateur bloqué, etc.), afficher une alerte claire.
Fermer les WebSockets de l’ancien utilisateur si l’identifiant change après la connexion.
✅ Étape 4 : Échange du code avec Google côté backend
Le backend va maintenant échanger le code contre un token d’accès.

📌 Déroulement :

Le backend reçoit le code du frontend (POST /auth/google/callback).
Il envoie une requête à Google pour récupérer :
✅ access_token (permet d’accéder aux API Google)
✅ id_token (JWT contenant l’email et les infos utilisateur)
Il vérifie la signature du id_token pour s’assurer qu’il a bien été émis par Google.
Il extrait les informations utiles (email, nom, avatar).
⚠️ Subtilités à prendre en compte pour ton projet :

Le token Google ne sera pas conservé ➝ une fois les données extraites, il est supprimé.
La vérification du id_token doit être sécurisée ➝ il ne suffit pas de le décoder, il faut aussi vérifier la signature avec la clé publique de Google.
Si l’email est blacklisté en Redis, refuser la connexion avec un message d’erreur.
✅ Étape 5 : Création / Récupération de l’utilisateur en base de données
Si l’utilisateur n’existe pas encore en base, il faut le créer.

📌 Déroulement :

Rechercher l’utilisateur via son email.
Si l’utilisateur n’existe pas :
Générer un username unique (ex: user1234 basé sur l’email).
Insérer l’utilisateur en base avec :
email
username (généré dynamiquement)
avatar
oauth_provider = google
Si l’utilisateur existe déjà, récupérer ses informations.
⚠️ Subtilités à prendre en compte pour ton projet :

Le username ne doit pas contenir d’espaces (contrairement au nom complet fourni par Google).
Générer un username unique automatiquement en s’assurant qu’il n’existe pas déjà en base.
Si l’utilisateur avait déjà une session WebSocket, fermer l’ancienne et ouvrir la nouvelle.
✅ Étape 6 : Génération des JWT et stockage sécurisé
Une fois l’utilisateur authentifié, le backend génère ses propres JWT pour gérer la session.

📌 Déroulement :

Générer un accessToken (valable 15 min) et un refreshToken (valable 7 jours).
Stocker les tokens dans des cookies HTTP-only sécurisés (SameSite=Lax).
Répondre au front avec { success: true }.
⚠️ Subtilités à prendre en compte pour ton projet :

Les cookies doivent être HTTP-only pour éviter les attaques XSS.
Le refresh token doit être stocké en Redis pour pouvoir être révoqué en cas de déconnexion.
✅ Étape 7 : Vérification de l’authentification (/me)
Le front doit pouvoir savoir si l’utilisateur est connecté.

📌 Déroulement :

Le frontend appelle /me après chargement de la page.
Le backend vérifie les cookies et renvoie les infos de l’utilisateur.
⚠️ Subtilités à prendre en compte pour ton projet :

Si l’utilisateur a été déconnecté côté serveur, il faut fermer son WebSocket.
✅ Étape 8 : Gestion de la déconnexion
L’utilisateur doit pouvoir se déconnecter proprement.

📌 Déroulement :

Le front appelle /logout.
Le backend supprime les cookies et le refresh token en Redis.
Le WebSocket de l’utilisateur est fermé.
⚠️ Subtilités à prendre en compte pour ton projet :

S’assurer que la session WebSocket est bien fermée après déconnexion.
Gérer un event côté WebSocket pour informer les autres utilisateurs que l’utilisateur s’est déconnecté.