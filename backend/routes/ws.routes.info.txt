ROUTES WEBSOCKET
==============

ğŸ“Œ creation d'une gestion websocket cote server dans server.js
----------------
Initialiser un serveur WebSocket et le lier au serveur HTTP.
VÃ©rifier et authentifier les connexions avec un accessToken.
Associer chaque WebSocket Ã  un userId pour identifier les utilisateurs connectÃ©s.
GÃ©rer la dÃ©connexion et mettre Ã  jour les utilisateurs en ligne dans Redis.
Diffuser en temps rÃ©el les mises Ã  jour des statuts Ã  tous les clients connectÃ©s.
Assurer la gestion des erreurs et Ã©viter les connexions non autorisÃ©es.

ğŸ“Œ suivi users online
-------------------------
Stocker la liste des utilisateurs connectÃ©s dans Redis (SADD online_users userId) pour un accÃ¨s rapide.
Supprimer un utilisateur de Redis (SREM online_users userId) dÃ¨s qu'il se dÃ©connecte ou devient inactif.
Diffuser les mises Ã  jour en temps rÃ©el via WebSocket pour informer les autres utilisateurs des connexions/dÃ©connexions.
Utiliser un mÃ©canisme de ping-pong rÃ©gulier pour Ã©viter les connexions fantÃ´mes.
Assurer la reconnexion automatique en cas de coupure WebSocket pour Ã©viter la perte de connexion.

ğŸ“Œ Gestion WebSocket cÃ´tÃ© front dans index.html
-------------------------

Se connecter automatiquement au WebSocket lors du chargement de la page avec lâ€™accessToken.
Ã‰couter les mises Ã  jour des utilisateurs en ligne et mettre Ã  jour l'affichage en temps rÃ©el.
Envoyer des ping rÃ©guliÃ¨rement pour garder la connexion active et dÃ©tecter les coupures.
Mettre en place une reconnexion automatique en cas de dÃ©connexion WebSocket pour garantir la continuitÃ© du suivi.
IntÃ©grer un champ de recherche dâ€™utilisateurs permettant de voir si un utilisateur est connectÃ© ou non en interrogeant SQLite (infos user) et Redis (statut en ligne).
Mettre Ã  jour dynamiquement les rÃ©sultats de recherche en fonction des changements de statut (online/offline).

ğŸ“Œ Gestion WebSocket a la deconnexion.
-------------------------
Bien arreter les connexions websockets.


ğŸ“Œ Route: /online-status/:username (GET)
-------------------------------------
VÃ©rifie si un utilisateur est en ligne.
Params: username
Response: { online: boolean }

ğŸ“Œ Route: /ws (WebSocket)
-----------------------
Point d'entrÃ©e WebSocket pour la gestion des connexions en temps rÃ©el.
FonctionnalitÃ©s:
- Authentification par token
- Gestion du statut en ligne
- SystÃ¨me de ping/pong pour vÃ©rifier la connexion
- Diffusion des changements de statut

Messages WebSocket supportÃ©s:
- get_online_users: Demande la liste des utilisateurs en ligne
- status_update: Notification de changement de statut

SÃ©curitÃ©:
- VÃ©rification des tokens toutes les 30 secondes
- DÃ©connexion automatique aprÃ¨s 35 secondes sans pong
- Stockage des statuts dans Redis

Note: Toutes les connexions WebSocket nÃ©cessitent un token d'accÃ¨s valide via les cookies



ğŸ“Œ Live Chat :

Route: /live_chat_message (POST)
- envois le contenu du Message
- broadcast a tout le monde via websocket, le username(auteur) + Message (data.type = livechat, data.user, data.message)


Route : /direct_chat_message
- envois le contenu du Message + destinataire	
- broadcast a destinataire via websocket, le username(auteur) + Message (data.type = direct_message, data.user, data.message)