ROUTES D'AUTHENTIFICATION
========================

ğŸ“Œ Route: / (GET)
----------------
Simple route de test pour vÃ©rifier que l'API fonctionne.
Response: { status: "API is running" }

ğŸ“Œ Route: /register (POST)
-------------------------
Enregistrement d'un nouvel utilisateur.
Body: { username, password }
- VÃ©rifie que username et password sont fournis
- VÃ©rifie que le username n'existe pas dÃ©jÃ 
- Hash le mot de passe
- CrÃ©e l'utilisateur dans la base de donnÃ©es
Response: { success, message, username, id }

ğŸ“Œ Route: /unregister (POST)
---------------------------
Suppression d'un compte utilisateur.
Body: { username, password }
- VÃ©rifie les credentials
- Anonymise les parties de l'utilisateur
- RÃ©voque tous les tokens
- Supprime le compte
Response: { success, message }

ğŸ“Œ Route: /isUser/:username (GET)
-------------------------------
VÃ©rifie si un username existe.
Params: username
Response: { exists: boolean }

ğŸ“Œ Route: /isPassword (POST)
--------------------------
VÃ©rifie si le mot de passe est correct pour un utilisateur.
Body: { username, password }
Response: { valid: boolean }

ğŸ“Œ Route: /getUserId (POST)
-------------------------
RÃ©cupÃ¨re l'ID d'un utilisateur par son username.
Body: { username }
Response: { success, id }

ğŸ“Œ Route: /login (POST)
---------------------
Connecte un utilisateur.
Body: { username, password }
- VÃ©rifie les credentials
- GÃ©nÃ¨re access token (15min) et refresh token (7 jours)
- CrÃ©e les cookies HTTP-Only et les envoies au front
Response: { success, message, username, id }

ğŸ“Œ Route: /refresh (POST)
-----------------------
RafraÃ®chit l'access token avec le refresh token.
Cookies requis: refreshToken
- GÃ©nÃ¨re un nouveau access token
- Met Ã  jour le cookie
Response: { success: boolean }

ğŸ“Œ Route: /protected (GET)
------------------------
Route protÃ©gÃ©e d'exemple.
Headers requis: Cookie avec accessToken valide
Response: { message, user }

ğŸ“Œ Route: /online-users (GET)
---------------------------
RÃ©cupÃ¨re la liste des utilisateurs en ligne.
Headers requis: Cookie avec accessToken valide
Response: { users: [{id, username}], count }

ğŸ“Œ Route: /logout (POST)
----------------------
DÃ©connecte un utilisateur.
Cookies requis: accessToken
- Blacklist le token actuel
- RÃ©voque tous les tokens de l'utilisateur
- Supprime les cookies
Response: { success, message }

ğŸ“Œ Route: /revoke (POST)
----------------------
RÃ©voque tous les tokens d'un utilisateur.
Body: { userId }
Response: { success, message }

ğŸ“Œ Route: /verify_token (POST)
---------------------------
VÃ©rifie si le token est valide.
Cookies requis: accessToken
- Valide le token
- VÃ©rifie si l'utilisateur existe toujours
Response: { valid: boolean, username? }

Notes:
------
- Toutes les routes protÃ©gÃ©es utilisent le middleware d'authentification
- Les tokens sont stockÃ©s dans des cookies HTTP-Only
- La gestion des erreurs inclut des logs dÃ©taillÃ©s
- Les tokens rÃ©voquÃ©s sont mis en blacklist dans Redis
